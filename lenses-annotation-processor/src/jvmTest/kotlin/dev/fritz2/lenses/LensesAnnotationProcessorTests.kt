package dev.fritz2.lenses


import com.squareup.kotlinpoet.metadata.KotlinPoetMetadataPreview
import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.SourceFile
import org.assertj.core.api.Assertions
import kotlin.io.path.ExperimentalPathApi
import kotlin.io.path.createTempDirectory
import kotlin.test.Test

class LensesAnnotationProcessorTests {

    @KotlinPoetMetadataPreview
    @ExperimentalPathApi
    @Test
    fun `validate lenses generation works`() {
        val kotlinSource = SourceFile.kotlin(
            "file_lenses.kt", """
                package dev.fritz2.lensetest

                import dev.fritz2.lenses.Lenses

                class MyType

                @Lenses
                data class Foo(
                    val bar: Int,
                    val baz: String,
                    val fooBar: MyType
                    )
            """
        )

        val compilationResult = compileSource(kotlinSource)

        Assertions.assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK)
        Assertions.assertThat(
            compilationResult.generatedFiles.find { it.name == "GeneratedLenses.kt" }
        ).hasContent(
            """
            |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
            |package dev.fritz2.lensetest
            |
            |import dev.fritz2.lenses.Lens
            |import dev.fritz2.lenses.buildLens
            |import kotlin.Int
            |import kotlin.String
            |
            |public object L {
            |  public object Foo {
            |    public val bar: Lens<dev.fritz2.lensetest.Foo, Int> = buildLens("bar", { it.bar }, { p, v ->
            |        p.copy(bar = v)})
            |
            |    public val baz: Lens<dev.fritz2.lensetest.Foo, String> = buildLens("baz", { it.baz }, { p, v ->
            |        p.copy(baz = v)})
            |
            |    public val fooBar: Lens<dev.fritz2.lensetest.Foo, MyType> = buildLens("fooBar", { it.fooBar }, {
            |        p, v -> p.copy(fooBar = v)})
            |  }
            |}
            """.trimMargin()
        )
    }

    @KotlinPoetMetadataPreview
    @ExperimentalPathApi
    @Test
    fun `lenses ignore none ctor properties`() {
        val kotlinSource = SourceFile.kotlin(
            "file_lenses.kt", """
                package dev.fritz2.lensetest

                import dev.fritz2.lenses.Lenses

                @Lenses
                data class Foo(val bar: Int) {
                    val ignored = bar + 1 // must not appear in lense!
                }
            """
        )

        val compilationResult = compileSource(kotlinSource)

        Assertions.assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK)
        Assertions.assertThat(
            compilationResult.generatedFiles.find { it.name == "GeneratedLenses.kt" }
        ).hasContent(
            """
            |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
            |package dev.fritz2.lensetest
            |
            |import dev.fritz2.lenses.Lens
            |import dev.fritz2.lenses.buildLens
            |import kotlin.Int
            |
            |public object L {
            |  public object Foo {
            |    public val bar: Lens<dev.fritz2.lensetest.Foo, Int> = buildLens("bar", { it.bar }, { p, v ->
            |        p.copy(bar = v)})
            |  }
            |}
            |
            """.trimMargin()
        )
    }


    @KotlinPoetMetadataPreview
    @ExperimentalPathApi
    @Test
    fun `annotate data classes outside of package fails`() {
        val compilationResult = compileSource(
            SourceFile.kotlin(
                "file_lenses_foobar.kt", """
                // no package!
                import dev.fritz2.lenses.Lenses

                @Lenses
                data class Foo(val bar: Int) {
                }

                @Lenses
                data class Bar(val baz: String) {
                }
            """
            ),
            SourceFile.kotlin(
                "file_lenses_baz.kt", """
                // no package!
                import dev.fritz2.lenses.Lenses

                @Lenses
                data class Baz(val foobar: Boolean) {
                }
            """
            )
        )

        Assertions.assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.COMPILATION_ERROR)
        Assertions.assertThat(compilationResult.messages).contains(
            "@Lenses annotation can't be applied to data classes outside of a package! " +
                    "Please add package declarations to the following classes:", "Bar", "Baz", "Foo"
        )
    }

    @KotlinPoetMetadataPreview
    @ExperimentalPathApi
    @Test
    fun `same class name in different packages`() {
        val compilationResult = compileSource(
            SourceFile.kotlin(
                "package1.kt", """
                package dev.fritz2.lensetest.bar
                import dev.fritz2.lenses.Lenses

                @Lenses
                data class Foo(val foo: Int) {}
            """
            ),
            SourceFile.kotlin(
                "package2.kt", """
                package dev.fritz2.lensetest.baz
                import dev.fritz2.lenses.Lenses

                @Lenses
                data class Foo(val foo: Int) {}
            """
            )
        )

        Assertions.assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK)
        Assertions.assertThat(
            compilationResult.generatedFiles.find { it.name == "GeneratedLenses.kt" && it.path.contains("bar") }
        ).hasContent(
            """
            |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
            |package dev.fritz2.lensetest.bar
            |
            |import dev.fritz2.lenses.Lens
            |import dev.fritz2.lenses.buildLens
            |import kotlin.Int
            |
            |public object L {
            |  public object Foo {
            |    public val foo: Lens<dev.fritz2.lensetest.bar.Foo, Int> = buildLens("foo", { it.foo }, { p, v ->
            |        p.copy(foo = v)})
            |  }
            |}
            """.trimMargin()
        )
        Assertions.assertThat(
            compilationResult.generatedFiles.find { it.name == "GeneratedLenses.kt" && it.path.contains("baz") }
        ).hasContent(
            """
            |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
            |package dev.fritz2.lensetest.baz
            |
            |import dev.fritz2.lenses.Lens
            |import dev.fritz2.lenses.buildLens
            |import kotlin.Int
            |
            |public object L {
            |  public object Foo {
            |    public val foo: Lens<dev.fritz2.lensetest.baz.Foo, Int> = buildLens("foo", { it.foo }, { p, v ->
            |        p.copy(foo = v)})
            |  }
            |}
            """.trimMargin()
        )
    }

    @ExperimentalPathApi
    @KotlinPoetMetadataPreview
    private fun compileSource(vararg sourceFiles: SourceFile): KotlinCompilation.Result =
        KotlinCompilation().apply {
            sources = sourceFiles.asList()
            jvmTarget = "1.8"
            annotationProcessors = listOf(LensesAnnotationProcessor())
            workingDir = createTempDirectory("fritz2-tests").toFile()
            inheritClassPath = true
            verbose = false
        }.compile()
}