---
title: fritz2
layout: layouts/page.njk
---

<div class="landing">
    <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

        <div class="mt-12 bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200">
            <div class="py-6 px-6 bg-gradient-to-r from-teal-500 to-cyan-600 text-white text-2xl font-nunito font-bold">
                Simple
            </div>
            <div class="px-4 py-2">
                <p class="w-3/4 py-4 prose max-w-prose">
                    In fritz2 we create elements or as we called them <em>tags</em> by using a DSL.
                    To extend the DSL like we do with the <code>greet</code> component, it needs a receiver called <code>RenderContext</code>.
                    Then you can call your component function inside every render-context
                    and passing the appropriate parameter <code>name</code> to it.
                </p>
                <div class="grid grid-cols-2">
                    <div>
                        {% highlight "kotlin" %}
fun RenderContext.greet(name: String) {
    h2 {
        +"Hello $name!"
    }
}
render {
    div("...") {
        greet("Peter")
    }
}
                        {% endhighlight %}
                    </div>
                    <div class="my-3">
                        <div class="bg-gray-300 h-full overflow-hidden rounded-r-lg">
                            <div class="p-3 uppercase text-gray-700">
                               Result
                            </div>
                            <div class="h-full">
                                <iframe class="w-full h-full" src="/examples-demo/index.html#simple"></iframe>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>


        <div class="mt-12 bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200">
            <div class="py-6 px-6 bg-gradient-to-r from-teal-500 to-cyan-600 text-white text-2xl font-nunito font-bold">
                Reactive
            </div>
            <div class="px-4 py-2">
                <p class="w-3/4 py-4 prose max-w-prose">
                    Lets getting more reactive by using a <code>Store</code> to save our data in.
                    Stores will be needed to get the two-way data-binding done in fritz2.
                    We get the data out as <code>Flow</code> by calling <code>store.data</code>
                    and render it into the <code>value</code> attribute of the <code>&lt;input&gt;</code> tag (one-way).
                    To update the data inside the store we have to call the <code>update</code> handler by using the
                    <code>handledBy</code> function (two-way).
                </p>
                <div class="grid grid-cols-2">
                    <div>
                        {% highlight "kotlin" %}
val store = storeOf("Hello Peter")

div("...") {
    input("...") {
        type("text")
        value(store.data)
        changes.values() handledBy store.update
    }
    p("...") {
        store.data.renderText(into = this)
    }
}
                        {% endhighlight %}
                    </div>
                    <div class="my-3">
                        <div class="bg-gray-300 h-full overflow-hidden rounded-r-lg">
                            <div class="p-3 uppercase text-gray-700">
                                Result
                            </div>
                            <div class="h-full">
                                <iframe class="w-full h-full" src="/examples-demo/index.html#reactive"></iframe>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-12 bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200">
            <div class="py-6 px-6 bg-gradient-to-r from-teal-500 to-cyan-600 text-white text-2xl font-nunito font-bold">
                Reactive
            </div>
            <div class="px-4 py-2">
                <p class="w-3/4 py-4 prose max-w-prose">
                    Lets getting more reactive by using a <code>Store</code> to save our data in.
                    Stores will be needed to get the two-way data-binding done in fritz2.
                    We get the data out as <code>Flow</code> by calling <code>store.data</code>
                    and render it into the <code>value</code> attribute of the <code>&lt;input&gt;</code> tag (one-way).
                    To update the data inside the store we have to call the <code>update</code> handler by using the
                    <code>handledBy</code> function (two-way).
                </p>
                <div class="grid grid-cols-2">
                    <div>
                        {% highlight "kotlin" %}
class Message(override val path: String, val text: String): ValidationMessage {
    override val isError: Boolean = true
}

val validation = validation<String, Message> {
    if(!Regex.fromLiteral("""/\S+@\S+\.\S+/""").matches(it.data))
        add(Message(it.path,"Not a valid mail address"))
}

val store = storeOf("", validation)

div("p-4 text-sm font-medium text-gray-700") {
    input("block w-full shadow-sm border-gray-300 rounded-md focus:ring-blue-700 focus:border-blue-700") {
        type("text")
        placeholder("Enter e-mail address")
        value(store.data)
        changes.values() handledBy store.update
    }
    store.messages.renderEach {
        p("mt-2 text-red-500") {
            +it.text
        }
    }
}
                        {% endhighlight %}
                    </div>
                    <div class="my-3">
                        <div class="bg-gray-300 h-full overflow-hidden rounded-r-lg">
                            <div class="p-3 uppercase text-gray-700">
                                Result
                            </div>
                            <div class="h-full">
                                <iframe class="w-full h-full" src="/examples-demo/index.html#complex"></iframe>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>